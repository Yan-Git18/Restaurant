@model Restaurant.Models.Rest_Pago
@{
    ViewData["Title"] = "Registrar Pago";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="container-fluid py-4">
    <div class="dashboard-header mb-4">
        <h1><i class="fas fa-plus-circle text-success me-2"></i>Nuevo Pago</h1>
        <p class="mb-0">Registre un nuevo pago asociado a una venta pendiente</p>
    </div>

    <div class="card shadow">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0"><i class="fas fa-credit-card me-2"></i>Información del Pago</h5>
        </div>
        <div class="card-body">
            <form asp-action="Crear" method="post">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label asp-for="VentaId" class="form-label fw-bold">Venta</label>
                    <select asp-for="VentaId" class="form-select" id="ventaSelect">
                        <option value="">-- Seleccione una venta --</option>
                        @foreach (var v in ViewBag.Ventas)
                        {
                            <option value="@v.Id"
                                    data-total="@v.Total"
                                    data-pagado="@v.Pagado"
                                    data-pendiente="@v.Pendiente">
                                Venta #@v.Id - Cliente: @v.Cliente (Pendiente: S/ @v.Pendiente)
                            </option>
                        }
                    </select>
                    <span asp-validation-for="VentaId" class="text-danger small"></span>
                </div>

                <div id="infoVenta" class="alert alert-info d-none mb-3"></div>

                <div class="mb-3">
                    <label asp-for="Metodo" class="form-label fw-bold">Método de Pago</label>
                    <select asp-for="Metodo" class="form-select">
                        <option value="">-- Seleccione un método --</option>
                        <option>Efectivo</option>
                        <option>Tarjeta</option>
                        <option>Transferencia</option>
                        <option>Yape</option>
                        <option>Plin</option>
                    </select>
                    <span asp-validation-for="Metodo" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Monto" class="form-label fw-bold">Monto</label>
                    <input asp-for="Monto" type="number" step="0.01" class="form-control" id="montoInput" placeholder="0.00" />
                    <span asp-validation-for="Monto" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Referencia" class="form-label fw-bold">Referencia</label>
                    <input asp-for="Referencia" class="form-control" placeholder="Número de operación o detalle" />
                </div>

                <div class="mb-3">
                    <label asp-for="Observaciones" class="form-label fw-bold">Observaciones</label>
                    <textarea asp-for="Observaciones" class="form-control" rows="3" placeholder="Notas opcionales..."></textarea>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a asp-controller="Pagos" asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Cancelar
                    </a>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-1"></i> Guardar Pago
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const ventaSelect = document.getElementById('ventaSelect');
            const infoVenta = document.getElementById('infoVenta');
            const montoInput = document.getElementById('montoInput');

            ventaSelect.addEventListener('change', function () {
                const selected = this.options[this.selectedIndex];
                const total = selected.dataset.total;
                const pagado = selected.dataset.pagado;
                const pendiente = selected.dataset.pendiente;

                if (selected.value) {
                    infoVenta.classList.remove('d-none');
                    infoVenta.innerHTML = `
                        <strong>Total:</strong> S/ ${total} <br>
                        <strong>Pagado:</strong> S/ ${pagado} <br>
                        <strong>Pendiente:</strong> <span class="text-danger fw-bold">S/ ${pendiente}</span>
                    `;
                    montoInput.max = pendiente;
                } else {
                    infoVenta.classList.add('d-none');
                    infoVenta.innerHTML = "";
                    montoInput.removeAttribute('max');
                }
            });

            // Validar monto antes de enviar
            document.querySelector('form').addEventListener('submit', function (e) {
                const selected = ventaSelect.options[ventaSelect.selectedIndex];
                const pendiente = parseFloat(selected.dataset.pendiente || 0);
                const monto = parseFloat(montoInput.value || 0);

                if (monto > pendiente) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Monto inválido',
                        text: `El monto no puede superar el saldo pendiente de S/ ${pendiente.toFixed(2)}.`,
                    });
                }
            });
        });
    </script>
}
