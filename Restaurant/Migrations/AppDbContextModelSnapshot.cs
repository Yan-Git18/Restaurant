// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RESTAURANT.Data;

#nullable disable

namespace Restaurant.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restaurant.Models.Rest_Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Bebidas"
                        });
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Comprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnviadoEmail")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VentaId")
                        .IsUnique();

                    b.ToTable("Comprobantes");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_DetallePedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesPedido");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Stock");

                    b.ToTable("Inventarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaActualizacion = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Bebidas",
                            Stock = 50,
                            StockMinimo = 0,
                            UnidadMedida = "Litro"
                        });
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Mesa", b =>
                {
                    b.Property<int>("MesaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MesaId"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MesaId");

                    b.HasIndex("Estado");

                    b.HasIndex("Numero")
                        .IsUnique();

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            MesaId = 1,
                            Capacidad = 4,
                            Estado = "Libre",
                            Numero = 1
                        },
                        new
                        {
                            MesaId = 2,
                            Capacidad = 2,
                            Estado = "Libre",
                            Numero = 2
                        },
                        new
                        {
                            MesaId = 3,
                            Capacidad = 6,
                            Estado = "Libre",
                            Numero = 3
                        },
                        new
                        {
                            MesaId = 4,
                            Capacidad = 4,
                            Estado = "Libre",
                            Numero = 4
                        },
                        new
                        {
                            MesaId = 5,
                            Capacidad = 8,
                            Estado = "Libre",
                            Numero = 5
                        });
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Referencia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VentaId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("MesaId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TipoPedido")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("MesaId");

                    b.HasIndex("ClienteId", "Fecha");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonaId"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("PersonaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique()
                        .HasFilter("[UsuarioId] IS NOT NULL");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("InventarioId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("InventarioId");

                    b.HasIndex("CategoriaId", "Disponible");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Disponible = true,
                            FechaCreacion = new DateTime(2025, 9, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InventarioId = 1,
                            Nombre = "Agua Mineral",
                            Precio = 2.50m
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            Disponible = true,
                            FechaCreacion = new DateTime(2025, 9, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InventarioId = 1,
                            Nombre = "Refresco",
                            Precio = 4.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 1,
                            Disponible = true,
                            FechaCreacion = new DateTime(2025, 9, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            InventarioId = 1,
                            Nombre = "Jugo Natural",
                            Precio = 6.00m
                        });
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Reserva", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservaId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("MesaId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPersonas")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ReservaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MesaId");

                    b.HasIndex("FechaHora", "MesaId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolId"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RolId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RolId = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            RolId = 2,
                            Nombre = "Cliente"
                        });
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime2");

                    b.HasKey("UsuarioId");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Activo = true,
                            Correo = "admin@delizioso.com",
                            FechaCreacion = new DateTime(2025, 9, 27, 16, 41, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = "admin123",
                            RolId = 1
                        },
                        new
                        {
                            UsuarioId = 2,
                            Activo = true,
                            Correo = "cliente@gmail.com",
                            FechaCreacion = new DateTime(2025, 9, 27, 16, 41, 0, 0, DateTimeKind.Unspecified),
                            PasswordHash = "cliente123",
                            RolId = 2
                        });
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Fecha");

                    b.HasIndex("PedidoId")
                        .IsUnique();

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Comprobante", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Venta", "Venta")
                        .WithOne("Comprobante")
                        .HasForeignKey("Restaurant.Models.Rest_Comprobante", "VentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_DetallePedido", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Pedido", "Pedido")
                        .WithMany("DetallesPedido")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Models.Rest_Producto", "Producto")
                        .WithMany("DetallesPedido")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Pago", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Venta", "Venta")
                        .WithMany("Pagos")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Pedido", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Persona", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Restaurant.Models.Rest_Mesa", "Mesa")
                        .WithMany("Pedidos")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cliente");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Persona", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Usuario", "Usuario")
                        .WithOne("Cliente")
                        .HasForeignKey("Restaurant.Models.Rest_Persona", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Producto", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Restaurant.Models.Rest_Inventario", "Inventario")
                        .WithMany("Productos")
                        .HasForeignKey("InventarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Inventario");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Reserva", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Persona", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Restaurant.Models.Rest_Mesa", "Mesa")
                        .WithMany("Reservas")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Usuario", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Venta", b =>
                {
                    b.HasOne("Restaurant.Models.Rest_Pedido", "Pedido")
                        .WithOne("Venta")
                        .HasForeignKey("Restaurant.Models.Rest_Venta", "PedidoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Inventario", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Mesa", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Pedido", b =>
                {
                    b.Navigation("DetallesPedido");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Persona", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Producto", b =>
                {
                    b.Navigation("DetallesPedido");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Usuario", b =>
                {
                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Restaurant.Models.Rest_Venta", b =>
                {
                    b.Navigation("Comprobante");

                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
